// <auto-generated />
using System;
using MediaBalansSaville.Data.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MediaBalansSaville.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AboutSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutSettingsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutSettingsId");

                    b.ToTable("AboutSettingsCertificates");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutSettingsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutSettingsId");

                    b.ToTable("AboutSettingsItems");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsItemLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutSettingsItemId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutSettingsItemId");

                    b.HasIndex("LangId");

                    b.ToTable("AboutSettingsItemLang");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("OurMission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurStory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurVision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhySaville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutSettingsId");

                    b.HasIndex("LangId");

                    b.ToTable("AboutSettingsLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceipt")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.CategoryLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LangId");

                    b.ToTable("CategoryLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Exportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Exportations");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ExportationCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExportationCountries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            IsActive = false,
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            Code = "",
                            IsActive = false,
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            Code = "",
                            IsActive = false,
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            Code = "",
                            IsActive = false,
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 5,
                            Code = "",
                            IsActive = false,
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 6,
                            Code = "",
                            IsActive = false,
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 7,
                            Code = "",
                            IsActive = false,
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 8,
                            Code = "",
                            IsActive = false,
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 9,
                            Code = "",
                            IsActive = false,
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 10,
                            Code = "",
                            IsActive = false,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 11,
                            Code = "",
                            IsActive = false,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 12,
                            Code = "",
                            IsActive = false,
                            Name = "Azerbaijan"
                        });
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ExportationLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExportationId")
                        .HasColumnType("int");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExportationId");

                    b.HasIndex("LangId");

                    b.ToTable("ExportationLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.FAQLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FAQId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FAQId");

                    b.HasIndex("LangId");

                    b.ToTable("FAQLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Lang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Langs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "az",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Azərbaycan",
                            RecordedAtDate = new DateTime(2021, 6, 5, 19, 4, 8, 865, DateTimeKind.Local).AddTicks(1150),
                            SlugUrl = "az",
                            UrlId = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "ru",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Rusiya",
                            RecordedAtDate = new DateTime(2021, 6, 5, 19, 4, 8, 875, DateTimeKind.Local).AddTicks(6110),
                            SlugUrl = "ru",
                            UrlId = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "en",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "İngiltərə",
                            RecordedAtDate = new DateTime(2021, 6, 5, 19, 4, 8, 875, DateTimeKind.Local).AddTicks(6150),
                            SlugUrl = "en",
                            UrlId = 3
                        });
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Letter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.PomegranateSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PomegranateSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.PomegranateSettingsLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BoostDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoostTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthInsuranceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthInsuranceTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("MainDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PomegranateSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("RhythmDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RhythmTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("PomegranateSettingsId");

                    b.ToTable("PomegranateSettingsLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductSeoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductSeoId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ProductLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutrition")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhotos");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProductValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiptSeoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ReceiptSeoId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ReceiptLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ingredients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<string>("Preparation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ReceiptPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCover")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptPhotos");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "admin",
                            RecordedAtDate = new DateTime(2021, 6, 5, 19, 4, 8, 883, DateTimeKind.Local).AddTicks(9430),
                            SlugUrl = "admin",
                            UrlId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "user",
                            RecordedAtDate = new DateTime(2021, 6, 5, 19, 4, 8, 884, DateTimeKind.Local).AddTicks(60),
                            SlugUrl = "user",
                            UrlId = 2
                        });
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Seo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlog")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReceipt")
                        .HasColumnType("bit");

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueId")
                        .HasColumnType("int");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seos");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.SeoLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keys")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<int>("SeoId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("SeoId");

                    b.ToTable("SeoLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.SiteSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdVideoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookPixel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleAnalyticsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.Property<string>("VideoCoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.SiteSettingsLang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<int>("SiteSettingsId")
                        .HasColumnType("int");

                    b.Property<string>("SliderDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LangId");

                    b.HasIndex("SiteSettingsId");

                    b.ToTable("SiteSettingsLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordedAtDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlugUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UrlId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            PasswordHash = "c6d3f51ff85fec296dbd14d70719d403e7c63a168536ce4c9cedd3f5f099a65fe7b4065ed293baffe4e453cd827b9130e5501e1462c04f253c577db2eeab571a",
                            PhoneNumber = "0534 895 22 84",
                            RecordedAtDate = new DateTime(2021, 6, 5, 19, 4, 8, 877, DateTimeKind.Local).AddTicks(9900),
                            SecretKey = "0b319023771744d2b17e0227b243900e6/5/202170408PM",
                            UrlId = 0
                        });
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsCertificate", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.AboutSettings", "AboutSettings")
                        .WithMany("AboutSettingsCertificates")
                        .HasForeignKey("AboutSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsItem", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.AboutSettings", "AboutSettings")
                        .WithMany("AboutSettingsItems")
                        .HasForeignKey("AboutSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsItemLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.AboutSettingsItem", "AboutSettingsItem")
                        .WithMany("AboutSettingsItemLangs")
                        .HasForeignKey("AboutSettingsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutSettingsItem");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.AboutSettings", "AboutSettings")
                        .WithMany("AboutSettingsLangs")
                        .HasForeignKey("AboutSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AboutSettings");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.CategoryLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Category", "Category")
                        .WithMany("CategoryLangs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ExportationLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Exportation", "Exportation")
                        .WithMany("ExportationLangs")
                        .HasForeignKey("ExportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exportation");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.FAQLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.FAQ", "FAQ")
                        .WithMany("FAQLangs")
                        .HasForeignKey("FAQId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FAQ");

                    b.Navigation("Lang");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.PomegranateSettingsLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.PomegranateSettings", "PomegranateSettings")
                        .WithMany("PomegranateSettingsLangs")
                        .HasForeignKey("PomegranateSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lang");

                    b.Navigation("PomegranateSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Product", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Seo", "ProductSeo")
                        .WithMany()
                        .HasForeignKey("ProductSeoId");

                    b.Navigation("Category");

                    b.Navigation("ProductSeo");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ProductLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Product", "Product")
                        .WithMany("ProductLangs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lang");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ProductPhoto", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Receipt", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Category", "Category")
                        .WithMany("Receipts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Seo", "ReceiptSeo")
                        .WithMany()
                        .HasForeignKey("ReceiptSeoId");

                    b.Navigation("Category");

                    b.Navigation("ReceiptSeo");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ReceiptLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Receipt", "Receipt")
                        .WithMany("ReceiptLangs")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lang");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.ReceiptPhoto", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Receipt", "Receipt")
                        .WithMany("ReceiptPhotos")
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.SeoLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.Seo", "Seo")
                        .WithMany("SeoLangs")
                        .HasForeignKey("SeoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lang");

                    b.Navigation("Seo");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.SiteSettingsLang", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Lang", "Lang")
                        .WithMany()
                        .HasForeignKey("LangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.SiteSettings", "SiteSettings")
                        .WithMany("SiteSettingsLangs")
                        .HasForeignKey("SiteSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lang");

                    b.Navigation("SiteSettings");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.UserRole", b =>
                {
                    b.HasOne("MediaBalansSaville.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MediaBalansSaville.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettings", b =>
                {
                    b.Navigation("AboutSettingsCertificates");

                    b.Navigation("AboutSettingsItems");

                    b.Navigation("AboutSettingsLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.AboutSettingsItem", b =>
                {
                    b.Navigation("AboutSettingsItemLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Category", b =>
                {
                    b.Navigation("CategoryLangs");

                    b.Navigation("Products");

                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Exportation", b =>
                {
                    b.Navigation("ExportationLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.FAQ", b =>
                {
                    b.Navigation("FAQLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.PomegranateSettings", b =>
                {
                    b.Navigation("PomegranateSettingsLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Product", b =>
                {
                    b.Navigation("ProductLangs");

                    b.Navigation("ProductPhotos");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Receipt", b =>
                {
                    b.Navigation("ReceiptLangs");

                    b.Navigation("ReceiptPhotos");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.Seo", b =>
                {
                    b.Navigation("SeoLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.SiteSettings", b =>
                {
                    b.Navigation("SiteSettingsLangs");
                });

            modelBuilder.Entity("MediaBalansSaville.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
